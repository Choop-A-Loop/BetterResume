{"version":3,"sources":["components/Header/Buttons/index.js","components/Header/index.js","pages/home/index.js","pages/portfolio/index.js","pages/contact/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","backgroundColor","Buttons","props","classes","React","useState","page","value","setValue","redirect","setRedirect","push","to","BottomNavigation","onChange","event","newValue","className","BottomNavigationAction","label","icon","Header","Grid","container","direction","justify","alignItems","item","xs","this","Component","home","Container","maxWidth","portfolio","contact","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ubAWMA,G,MAAYC,YAAW,CACzBC,KAAM,CACFC,MAAO,IACPC,gBAAiB,cAKV,SAASC,EAAQC,GAC5B,IAAMC,EAAUP,IADmB,EAETQ,IAAMC,SAASH,EAAMI,MAFZ,mBAE5BC,EAF4B,KAErBC,EAFqB,OAGHJ,IAAMC,SAAS,IAHZ,mBAG5BI,EAH4B,KAGlBC,EAHkB,KAanC,OAAID,EACO,kBAAC,IAAD,CAAUE,MAAI,EAACC,GAAIL,IAI1B,kBAACM,EAAA,EAAD,CAAkBN,MAAOA,EAAOO,SAbf,SAACC,EAAOC,GACrBA,IAAaT,IAGjBC,EAASQ,GACTN,GAAY,KAQ4CO,UAAWd,EAAQL,MACnE,kBAACoB,EAAA,EAAD,CAAwBC,MAAM,OAAOZ,MAAM,IAAIa,KAAM,kBAAC,IAAD,OAAc,kBAAC,IAAD,CAAMR,GAAG,OAC5E,kBAACM,EAAA,EAAD,CAAwBC,MAAM,YAAYZ,MAAM,aAAaa,KAAM,kBAAC,IAAD,OAAsB,kBAAC,IAAD,CAAMR,GAAG,gBAClG,kBAACM,EAAA,EAAD,CAAwBC,MAAM,aAAaZ,MAAM,WAAWa,KAAM,kBAAC,IAAD,OAAe,kBAAC,IAAD,CAAMR,GAAG,Q,kBCb3FS,E,uKAjBP,OACI,kBAACC,EAAA,EAAD,CACAC,WAAS,EACTC,UAAU,MACVC,QAAQ,gBACRC,WAAW,SACXT,UAAU,cAEN,kBAACK,EAAA,EAAD,CAAMK,MAAI,GAAC,4BAAQV,UAAU,QAAlB,qBACX,kBAACK,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACX,kBAAC3B,EAAD,CAASK,KAAMuB,KAAK3B,MAAMI,a,GAZzBwB,a,QCMNC,G,6KAPP,OACI,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKhB,UAAU,iBAC/B,kBAAC,EAAD,CAAQX,KAAK,W,GAJVwB,cCQJI,E,uKAPP,OACI,kBAACF,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAAC,EAAD,CAAQ3B,KAAK,oB,GAJLwB,aCSTK,E,uKAPP,OACI,kBAACH,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAAC,EAAD,CAAQ3B,KAAK,kB,GAJPwB,aCgBPM,G,6KAXX,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,aAAaC,UAAWL,IAC1C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,WAAWC,UAAWJ,U,GAPhCL,cCKEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c0c32460.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport HomeIcon from '@material-ui/icons/Home';\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport './styles.css'\n\nconst useStyles = makeStyles({\n    root: {\n        width: 300,\n        backgroundColor: '#01579b'\n    },\n});\n\n\nexport default function Buttons(props) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(props.page);\n    const [redirect, setRedirect] = React.useState('')\n\n    const handleChange = (event, newValue) => {\n        if (newValue === value) {\n            return\n        }\n        setValue(newValue);\n        setRedirect(true)\n    };\n\n    if (redirect) {\n        return <Redirect push to={value} />\n    }\n\n    return (\n        <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />}><Link to='/' /></BottomNavigationAction>\n                <BottomNavigationAction label=\"Portfolio\" value=\"/portfolio\" icon={<LibraryBooksIcon />}><Link to='/portfolio' /></BottomNavigationAction>\n                <BottomNavigationAction label=\"Contact Me\" value=\"/contact\" icon={<PhoneIcon />}><Link to='/' /></BottomNavigationAction>\n        </BottomNavigation>\n    );\n}\n","import React, { Component } from 'react';\nimport Buttons from './Buttons'\nimport './styles.css'\n\n// material-ui\nimport Grid from '@material-ui/core/Grid';\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <Grid \n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            className='top-header'\n            >\n                <Grid item><header className='name'>Matthew Jeffords</header></Grid>\n                <Grid item xs={3}>\n                    <Buttons page={this.props.page} />\n                </Grid>\n            </Grid>\n\n        );\n    }\n}\nexport default Header;","import React, { Component } from 'react';\nimport Header from '../../components/Header'\nimport Container from '@material-ui/core/Container';\nimport './styles.css'\n\nclass home extends Component {\n    render() {\n        return (\n            <Container maxWidth=\"md\" className='mainContainer'>\n                <Header page='/' />\n            </Container>\n        );\n    }\n}\nexport default home;","import React, { Component } from 'react';\nimport Header from '../../components/Header'\nimport Container from '@material-ui/core/Container';\n\nclass portfolio extends Component {\n    render() {\n        return (\n            <Container maxWidth=\"md\">\n                <Header page='/portfolio' />\n            </Container>\n        );\n    }\n}\nexport default portfolio;","import React, { Component } from 'react';\nimport Header from '../../components/Header'\nimport Container from '@material-ui/core/Container';\n\nclass contact extends Component {\n    render() {\n        return (\n            <Container maxWidth=\"md\">\n                <Header page='/contact' />\n            </Container>\n        );\n    }\n}\nexport default contact;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport home from \"./pages/home\"\nimport portfolio from \"./pages/portfolio\"\nimport contact from \"./pages/contact\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={home} />\n          <Route exact path=\"/portfolio\" component={portfolio} />\n          <Route exact path=\"/contact\" component={contact} />\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}